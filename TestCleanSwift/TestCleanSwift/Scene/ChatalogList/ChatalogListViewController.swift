//
//  CatalogListViewController.swift
//  TestCleanSwift
//
//  Created by Ruslan Liulka on 29.04.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogListDisplayLogic: class
{
    func displayCatalog(viewModel: CatalogList.Catalog.ViewModel)
}

class CatalogListViewController: UIViewController, CatalogListDisplayLogic
{
    var interactor: CatalogListBusinessLogic?
    var router: (NSObjectProtocol & CatalogListRoutingLogic & CatalogListDataPassing)?
    
    private let tableView = UITableView()
    private var products: [ViewModelProduct] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setupTableView() {
        tableView.frame = view.bounds
        tableView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(CustomCell.self, forCellReuseIdentifier: "CustomCell")
        view.addSubview(tableView)
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CatalogListInteractor()
        let presenter = CatalogListPresenter()
        let router = CatalogListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupTableView()
        doCatalog()
    }
    
    // MARK: Do Catalog
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doCatalog()
    {
        let request = CatalogList.Catalog.Request()
        interactor?.doCatalog(request: request)
    }
    
    func displayCatalog(viewModel: CatalogList.Catalog.ViewModel)
    {
        products.append(contentsOf: viewModel.productsViewModel)
        tableView.reloadData()
    }
}

extension CatalogListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        print(products.count)
        return products.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CustomCell", for: indexPath) as! CustomCell
        cell.configure(with: products[indexPath.row])
        
        return cell
    }
    
    
}

extension CatalogListViewController: UITableViewDelegate {
    
}
