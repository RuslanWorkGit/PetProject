//
//  CharacterDetailsViewController.swift
//  CleanSwiftTest
//
//  Created by Ruslan Liulka on 06.05.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol CharacterDetailsDisplayLogic: class
{
    func displaySomething(viewModel: CharacterDetails.Character.ViewModel)
}

class CharacterDetailsViewController: UIViewController, CharacterDetailsDisplayLogic
{
    var interactor: CharacterDetailsBusinessLogic?
    var router: (NSObjectProtocol & CharacterDetailsRoutingLogic & CharacterDetailsDataPassing)?
    
    private var nameLable = UILabel()
    private let imageView = UIImageView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setupUI() {
        
        view.addSubview(nameLable)
        view.addSubview(imageView)
        
        nameLable.numberOfLines = 0
        nameLable.contentMode = .center
        
        nameLable.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            nameLable.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 30),
            nameLable.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 12),
            nameLable.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -12)
        ])
        
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.snp.makeConstraints { make in
            make.top.equalTo(nameLable.snp.bottom).offset(16)
            make.centerX.equalToSuperview()
            make.leading.trailing.equalToSuperview()
        }
        
    }
    
    private func setup()
    {
        let viewController = self
        let interactor = CharacterDetailsInteractor()
        let presenter = CharacterDetailsPresenter()
        let router = CharacterDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        view.backgroundColor = .white
        setupUI()
        doSomething()
    }
    
    // MARK: Do something
    
    func doSomething()
    {
        let request = CharacterDetails.Character.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CharacterDetails.Character.ViewModel)
    {
        DispatchQueue.main.async {
            self.nameLable.text = viewModel.viewModel.name
            
            if let urlImage = URL(string: viewModel.viewModel.image) {
                var request = URLRequest(url: urlImage)
                request.httpMethod = "GET"
                
                URLSession.shared.dataTask(with: request) { data, _, error in
                    if let error = error {
                        print(error)
                    }
                    
                    guard let responseData = data else { return }
                    
                    do {
                        self.imageView.image = UIImage(data: responseData)
                    } catch {
                        print(error)
                    }
                }.resume()
            }
        }
    }
}
